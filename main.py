
import logging
from aiogram import Bot, Dispatcher, executor, types
import openai
import os

TELEGRAM_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_KEY")
openai.api_key = OPENAI_API_KEY

bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher(bot)
logging.basicConfig(level=logging.INFO)

@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    await message.reply("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç Seamech Assistant. –ò—Å–ø–æ–ª—å–∑—É–π /ask –∏–ª–∏ /docs.")

@dp.message_handler(commands=['ask'])
async def ask_gpt(message: types.Message):
    user_input = message.get_args()
    if not user_input:
        await message.reply("–ù–∞–ø–∏—à–∏ –≤–æ–ø—Ä–æ—Å –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /ask.")
        return
    await message.reply("–î—É–º–∞—é...")
    try:
        response = openai.ChatCompletion.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —Å—É–¥–æ–≤–æ–π —ç–ª–µ–∫—Ç—Ä–æ–º–µ—Ö–∞–Ω–∏–∫–µ."},
                {"role": "user", "content": user_input}
            ]
        )
        await message.reply(response['choices'][0]['message']['content'])
    except Exception as e:
        await message.reply(f"–û—à–∏–±–∫–∞: {e}")

@dp.message_handler(commands=['docs'])
async def send_docs(message: types.Message):
    await message.reply("""üìö –î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–Ø:
1. –°—Ö–µ–º–∞ —ç–ª–µ–∫—Ç—Ä–æ–ø–∏—Ç–∞–Ω–∏—è –¥–≤–∏–≥–∞—Ç–µ–ª—è [PDF]
2. –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—É [PDF]""")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)

    
